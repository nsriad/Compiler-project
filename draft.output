Terminals unused in grammar

   IDENTIFIER
   CONSTANT
   STRING_LITERAL
   SIZEOF
   CHAR
   INT
   FLOAT
   DOUBLE
   VOID
   ELIF
   CASE
   DEFAULT
   SWITCH
   WHILE
   FOR
   CONTINUE
   BREAK
   RETURN
   TYPE_NAME
   IFX


State 0 conflicts: 5 shift/reduce, 1 reduce/reduce
State 4 conflicts: 5 shift/reduce, 8 reduce/reduce
State 8 conflicts: 6 shift/reduce, 8 reduce/reduce
State 9 conflicts: 5 shift/reduce, 8 reduce/reduce
State 20 conflicts: 1 shift/reduce
State 35 conflicts: 5 shift/reduce, 8 reduce/reduce
State 39 conflicts: 5 shift/reduce, 1 reduce/reduce
State 41 conflicts: 1 shift/reduce
State 42 conflicts: 12 shift/reduce
State 43 conflicts: 12 shift/reduce
State 44 conflicts: 12 shift/reduce
State 45 conflicts: 12 shift/reduce
State 46 conflicts: 12 shift/reduce
State 47 conflicts: 12 shift/reduce
State 48 conflicts: 6 shift/reduce
State 49 conflicts: 6 shift/reduce
State 50 conflicts: 6 shift/reduce
State 51 conflicts: 6 shift/reduce
State 52 conflicts: 6 shift/reduce
State 53 conflicts: 6 shift/reduce
State 58 conflicts: 5 shift/reduce, 1 reduce/reduce
State 61 conflicts: 5 shift/reduce, 8 reduce/reduce
State 64 conflicts: 5 shift/reduce, 1 reduce/reduce
State 66 conflicts: 5 shift/reduce, 8 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | statement MAIN '{' statement '}'

    3 statement: /* empty */
    4          | ';' statement
    5          | var_declare statement
    6          | expression ';' statement
    7          | conditional_statement statement

    8 var_declare: /* empty */
    9            | var_declare ',' var_declare
   10            | VAR INC_OP
   11            | VAR DEC_OP
   12            | VAR '=' expression ';'

   13 conditional_statement: IF '(' expression ')' '{' statement '}' statement
   14                      | IF '(' expression ')' '{' statement '}' ELSE '{' statement '}' statement

   15 expression: NUM
   16           | VAR
   17           | expression '+' expression
   18           | expression '-' expression
   19           | expression '*' expression
   20           | expression '/' expression
   21           | expression '<' expression
   22           | expression '>' expression
   23           | expression LE_OP expression
   24           | expression GE_OP expression
   25           | expression EQ_OP expression
   26           | expression NE_OP expression
   27           | expression AND_OP expression
   28           | expression OR_OP expression
   29           | '(' expression ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 13 14 29
')' (41) 13 14 29
'*' (42) 19
'+' (43) 17
',' (44) 9
'-' (45) 18
'/' (47) 20
';' (59) 4 6 12
'<' (60) 21
'=' (61) 12
'>' (62) 22
'{' (123) 2 13 14
'}' (125) 2 13 14
error (256)
NUM (258) 15
VAR (259) 10 11 12 16
MAIN (260) 2
IDENTIFIER (261)
CONSTANT (262)
STRING_LITERAL (263)
SIZEOF (264)
INC_OP (265) 10
DEC_OP (266) 11
LE_OP (267) 23
GE_OP (268) 24
EQ_OP (269) 25
NE_OP (270) 26
AND_OP (271) 27
OR_OP (272) 28
CHAR (273)
INT (274)
FLOAT (275)
DOUBLE (276)
VOID (277)
ELIF (278)
CASE (279)
DEFAULT (280)
IF (281) 13 14
ELSE (282) 14
SWITCH (283)
WHILE (284)
FOR (285)
CONTINUE (286)
BREAK (287)
RETURN (288)
TYPE_NAME (289)
IFX (290)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1 2, on right: 0
statement (51)
    on left: 3 4 5 6 7, on right: 2 4 5 6 7 13 14
var_declare (52)
    on left: 8 9 10 11 12, on right: 5 9
conditional_statement (53)
    on left: 13 14, on right: 7
expression (54)
    on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29, on right:
    6 12 13 14 17 18 19 20 21 22 23 24 25 26 27 28 29


state 0

    0 $accept: . program $end

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 8 (var_declare)
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 1 (program)

    program                go to state 6
    statement              go to state 7
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 1

   15 expression: NUM .

    $default  reduce using rule 15 (expression)


state 2

   10 var_declare: VAR . INC_OP
   11            | VAR . DEC_OP
   12            | VAR . '=' expression ';'
   16 expression: VAR .

    INC_OP  shift, and go to state 11
    DEC_OP  shift, and go to state 12
    '='     shift, and go to state 13

    $default  reduce using rule 16 (expression)


state 3

   13 conditional_statement: IF . '(' expression ')' '{' statement '}' statement
   14                      | IF . '(' expression ')' '{' statement '}' ELSE '{' statement '}' statement

    '('  shift, and go to state 14


state 4

    4 statement: ';' . statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 3 (statement)
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 15
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 5

   29 expression: '(' . expression ')'

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 17


state 6

    0 $accept: program . $end

    $end  shift, and go to state 18


state 7

    2 program: statement . MAIN '{' statement '}'

    MAIN  shift, and go to state 19


state 8

    5 statement: var_declare . statement
    9 var_declare: var_declare . ',' var_declare

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    ','  shift, and go to state 20
    '('  shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       [reduce using rule 3 (statement)]
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 21
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 9

    7 statement: conditional_statement . statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 3 (statement)
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 22
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 10

    6 statement: expression . ';' statement
   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34
    ';'     shift, and go to state 35


state 11

   10 var_declare: VAR INC_OP .

    $default  reduce using rule 10 (var_declare)


state 12

   11 var_declare: VAR DEC_OP .

    $default  reduce using rule 11 (var_declare)


state 13

   12 var_declare: VAR '=' . expression ';'

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 36


state 14

   13 conditional_statement: IF '(' . expression ')' '{' statement '}' statement
   14                      | IF '(' . expression ')' '{' statement '}' ELSE '{' statement '}' statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 37


state 15

    4 statement: ';' statement .

    $default  reduce using rule 4 (statement)


state 16

   16 expression: VAR .

    $default  reduce using rule 16 (expression)


state 17

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression
   29           | '(' expression . ')'

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34
    ')'     shift, and go to state 38


state 18

    0 $accept: program $end .

    $default  accept


state 19

    2 program: statement MAIN . '{' statement '}'

    '{'  shift, and go to state 39


state 20

    9 var_declare: var_declare ',' . var_declare

    VAR  shift, and go to state 40

    VAR       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 8 (var_declare)

    var_declare  go to state 41


state 21

    5 statement: var_declare statement .

    $default  reduce using rule 5 (statement)


state 22

    7 statement: conditional_statement statement .

    $default  reduce using rule 7 (statement)


state 23

   23 expression: expression LE_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 42


state 24

   24 expression: expression GE_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 43


state 25

   25 expression: expression EQ_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 44


state 26

   26 expression: expression NE_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 45


state 27

   27 expression: expression AND_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 46


state 28

   28 expression: expression OR_OP . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 47


state 29

   21 expression: expression '<' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 48


state 30

   22 expression: expression '>' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 49


state 31

   17 expression: expression '+' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 50


state 32

   18 expression: expression '-' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 51


state 33

   19 expression: expression '*' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 52


state 34

   20 expression: expression '/' . expression

    NUM  shift, and go to state 1
    VAR  shift, and go to state 16
    '('  shift, and go to state 5

    expression  go to state 53


state 35

    6 statement: expression ';' . statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 3 (statement)
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 54
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 36

   12 var_declare: VAR '=' expression . ';'
   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34
    ';'     shift, and go to state 55


state 37

   13 conditional_statement: IF '(' expression . ')' '{' statement '}' statement
   14                      | IF '(' expression . ')' '{' statement '}' ELSE '{' statement '}' statement
   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34
    ')'     shift, and go to state 56


state 38

   29 expression: '(' expression ')' .

    $default  reduce using rule 29 (expression)


state 39

    2 program: statement MAIN '{' . statement '}'

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 8 (var_declare)
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 57
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 40

   10 var_declare: VAR . INC_OP
   11            | VAR . DEC_OP
   12            | VAR . '=' expression ';'

    INC_OP  shift, and go to state 11
    DEC_OP  shift, and go to state 12
    '='     shift, and go to state 13


state 41

    9 var_declare: var_declare . ',' var_declare
    9            | var_declare ',' var_declare .

    ','  shift, and go to state 20

    ','       [reduce using rule 9 (var_declare)]
    $default  reduce using rule 9 (var_declare)


state 42

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   23           | expression LE_OP expression .
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 23 (expression)]
    GE_OP     [reduce using rule 23 (expression)]
    EQ_OP     [reduce using rule 23 (expression)]
    NE_OP     [reduce using rule 23 (expression)]
    AND_OP    [reduce using rule 23 (expression)]
    OR_OP     [reduce using rule 23 (expression)]
    '<'       [reduce using rule 23 (expression)]
    '>'       [reduce using rule 23 (expression)]
    '+'       [reduce using rule 23 (expression)]
    '-'       [reduce using rule 23 (expression)]
    '*'       [reduce using rule 23 (expression)]
    '/'       [reduce using rule 23 (expression)]
    $default  reduce using rule 23 (expression)


state 43

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   24           | expression GE_OP expression .
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 24 (expression)]
    GE_OP     [reduce using rule 24 (expression)]
    EQ_OP     [reduce using rule 24 (expression)]
    NE_OP     [reduce using rule 24 (expression)]
    AND_OP    [reduce using rule 24 (expression)]
    OR_OP     [reduce using rule 24 (expression)]
    '<'       [reduce using rule 24 (expression)]
    '>'       [reduce using rule 24 (expression)]
    '+'       [reduce using rule 24 (expression)]
    '-'       [reduce using rule 24 (expression)]
    '*'       [reduce using rule 24 (expression)]
    '/'       [reduce using rule 24 (expression)]
    $default  reduce using rule 24 (expression)


state 44

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   25           | expression EQ_OP expression .
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 25 (expression)]
    GE_OP     [reduce using rule 25 (expression)]
    EQ_OP     [reduce using rule 25 (expression)]
    NE_OP     [reduce using rule 25 (expression)]
    AND_OP    [reduce using rule 25 (expression)]
    OR_OP     [reduce using rule 25 (expression)]
    '<'       [reduce using rule 25 (expression)]
    '>'       [reduce using rule 25 (expression)]
    '+'       [reduce using rule 25 (expression)]
    '-'       [reduce using rule 25 (expression)]
    '*'       [reduce using rule 25 (expression)]
    '/'       [reduce using rule 25 (expression)]
    $default  reduce using rule 25 (expression)


state 45

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   26           | expression NE_OP expression .
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 26 (expression)]
    GE_OP     [reduce using rule 26 (expression)]
    EQ_OP     [reduce using rule 26 (expression)]
    NE_OP     [reduce using rule 26 (expression)]
    AND_OP    [reduce using rule 26 (expression)]
    OR_OP     [reduce using rule 26 (expression)]
    '<'       [reduce using rule 26 (expression)]
    '>'       [reduce using rule 26 (expression)]
    '+'       [reduce using rule 26 (expression)]
    '-'       [reduce using rule 26 (expression)]
    '*'       [reduce using rule 26 (expression)]
    '/'       [reduce using rule 26 (expression)]
    $default  reduce using rule 26 (expression)


state 46

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   27           | expression AND_OP expression .
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 27 (expression)]
    GE_OP     [reduce using rule 27 (expression)]
    EQ_OP     [reduce using rule 27 (expression)]
    NE_OP     [reduce using rule 27 (expression)]
    AND_OP    [reduce using rule 27 (expression)]
    OR_OP     [reduce using rule 27 (expression)]
    '<'       [reduce using rule 27 (expression)]
    '>'       [reduce using rule 27 (expression)]
    '+'       [reduce using rule 27 (expression)]
    '-'       [reduce using rule 27 (expression)]
    '*'       [reduce using rule 27 (expression)]
    '/'       [reduce using rule 27 (expression)]
    $default  reduce using rule 27 (expression)


state 47

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression
   28           | expression OR_OP expression .

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '<'     shift, and go to state 29
    '>'     shift, and go to state 30
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 28 (expression)]
    GE_OP     [reduce using rule 28 (expression)]
    EQ_OP     [reduce using rule 28 (expression)]
    NE_OP     [reduce using rule 28 (expression)]
    AND_OP    [reduce using rule 28 (expression)]
    OR_OP     [reduce using rule 28 (expression)]
    '<'       [reduce using rule 28 (expression)]
    '>'       [reduce using rule 28 (expression)]
    '+'       [reduce using rule 28 (expression)]
    '-'       [reduce using rule 28 (expression)]
    '*'       [reduce using rule 28 (expression)]
    '/'       [reduce using rule 28 (expression)]
    $default  reduce using rule 28 (expression)


state 48

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   21           | expression '<' expression .
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 21 (expression)]
    GE_OP     [reduce using rule 21 (expression)]
    EQ_OP     [reduce using rule 21 (expression)]
    NE_OP     [reduce using rule 21 (expression)]
    AND_OP    [reduce using rule 21 (expression)]
    OR_OP     [reduce using rule 21 (expression)]
    $default  reduce using rule 21 (expression)


state 49

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   22           | expression '>' expression .
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '+'     shift, and go to state 31
    '-'     shift, and go to state 32
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 22 (expression)]
    GE_OP     [reduce using rule 22 (expression)]
    EQ_OP     [reduce using rule 22 (expression)]
    NE_OP     [reduce using rule 22 (expression)]
    AND_OP    [reduce using rule 22 (expression)]
    OR_OP     [reduce using rule 22 (expression)]
    $default  reduce using rule 22 (expression)


state 50

   17 expression: expression . '+' expression
   17           | expression '+' expression .
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 17 (expression)]
    GE_OP     [reduce using rule 17 (expression)]
    EQ_OP     [reduce using rule 17 (expression)]
    NE_OP     [reduce using rule 17 (expression)]
    AND_OP    [reduce using rule 17 (expression)]
    OR_OP     [reduce using rule 17 (expression)]
    $default  reduce using rule 17 (expression)


state 51

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   18           | expression '-' expression .
   19           | expression . '*' expression
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28
    '*'     shift, and go to state 33
    '/'     shift, and go to state 34

    LE_OP     [reduce using rule 18 (expression)]
    GE_OP     [reduce using rule 18 (expression)]
    EQ_OP     [reduce using rule 18 (expression)]
    NE_OP     [reduce using rule 18 (expression)]
    AND_OP    [reduce using rule 18 (expression)]
    OR_OP     [reduce using rule 18 (expression)]
    $default  reduce using rule 18 (expression)


state 52

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   19           | expression '*' expression .
   20           | expression . '/' expression
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28

    LE_OP     [reduce using rule 19 (expression)]
    GE_OP     [reduce using rule 19 (expression)]
    EQ_OP     [reduce using rule 19 (expression)]
    NE_OP     [reduce using rule 19 (expression)]
    AND_OP    [reduce using rule 19 (expression)]
    OR_OP     [reduce using rule 19 (expression)]
    $default  reduce using rule 19 (expression)


state 53

   17 expression: expression . '+' expression
   18           | expression . '-' expression
   19           | expression . '*' expression
   20           | expression . '/' expression
   20           | expression '/' expression .
   21           | expression . '<' expression
   22           | expression . '>' expression
   23           | expression . LE_OP expression
   24           | expression . GE_OP expression
   25           | expression . EQ_OP expression
   26           | expression . NE_OP expression
   27           | expression . AND_OP expression
   28           | expression . OR_OP expression

    LE_OP   shift, and go to state 23
    GE_OP   shift, and go to state 24
    EQ_OP   shift, and go to state 25
    NE_OP   shift, and go to state 26
    AND_OP  shift, and go to state 27
    OR_OP   shift, and go to state 28

    LE_OP     [reduce using rule 20 (expression)]
    GE_OP     [reduce using rule 20 (expression)]
    EQ_OP     [reduce using rule 20 (expression)]
    NE_OP     [reduce using rule 20 (expression)]
    AND_OP    [reduce using rule 20 (expression)]
    OR_OP     [reduce using rule 20 (expression)]
    $default  reduce using rule 20 (expression)


state 54

    6 statement: expression ';' statement .

    $default  reduce using rule 6 (statement)


state 55

   12 var_declare: VAR '=' expression ';' .

    $default  reduce using rule 12 (var_declare)


state 56

   13 conditional_statement: IF '(' expression ')' . '{' statement '}' statement
   14                      | IF '(' expression ')' . '{' statement '}' ELSE '{' statement '}' statement

    '{'  shift, and go to state 58


state 57

    2 program: statement MAIN '{' statement . '}'

    '}'  shift, and go to state 59


state 58

   13 conditional_statement: IF '(' expression ')' '{' . statement '}' statement
   14                      | IF '(' expression ')' '{' . statement '}' ELSE '{' statement '}' statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 8 (var_declare)
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 60
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 59

    2 program: statement MAIN '{' statement '}' .

    $default  reduce using rule 2 (program)


state 60

   13 conditional_statement: IF '(' expression ')' '{' statement . '}' statement
   14                      | IF '(' expression ')' '{' statement . '}' ELSE '{' statement '}' statement

    '}'  shift, and go to state 61


state 61

   13 conditional_statement: IF '(' expression ')' '{' statement '}' . statement
   14                      | IF '(' expression ')' '{' statement '}' . ELSE '{' statement '}' statement

    NUM   shift, and go to state 1
    VAR   shift, and go to state 2
    IF    shift, and go to state 3
    ELSE  shift, and go to state 62
    ';'   shift, and go to state 4
    '('   shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 3 (statement)
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 63
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 62

   14 conditional_statement: IF '(' expression ')' '{' statement '}' ELSE . '{' statement '}' statement

    '{'  shift, and go to state 64


state 63

   13 conditional_statement: IF '(' expression ')' '{' statement '}' statement .

    $default  reduce using rule 13 (conditional_statement)


state 64

   14 conditional_statement: IF '(' expression ')' '{' statement '}' ELSE '{' . statement '}' statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 8 (var_declare)
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 65
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 65

   14 conditional_statement: IF '(' expression ')' '{' statement '}' ELSE '{' statement . '}' statement

    '}'  shift, and go to state 66


state 66

   14 conditional_statement: IF '(' expression ')' '{' statement '}' ELSE '{' statement '}' . statement

    NUM  shift, and go to state 1
    VAR  shift, and go to state 2
    IF   shift, and go to state 3
    ';'  shift, and go to state 4
    '('  shift, and go to state 5

    NUM       [reduce using rule 3 (statement)]
    NUM       [reduce using rule 8 (var_declare)]
    VAR       [reduce using rule 3 (statement)]
    VAR       [reduce using rule 8 (var_declare)]
    MAIN      reduce using rule 3 (statement)
    MAIN      [reduce using rule 8 (var_declare)]
    IF        [reduce using rule 3 (statement)]
    IF        [reduce using rule 8 (var_declare)]
    '}'       reduce using rule 3 (statement)
    '}'       [reduce using rule 8 (var_declare)]
    ';'       [reduce using rule 3 (statement)]
    ';'       [reduce using rule 8 (var_declare)]
    ','       reduce using rule 3 (statement)
    ','       [reduce using rule 8 (var_declare)]
    '('       [reduce using rule 3 (statement)]
    '('       [reduce using rule 8 (var_declare)]
    $default  reduce using rule 3 (statement)

    statement              go to state 67
    var_declare            go to state 8
    conditional_statement  go to state 9
    expression             go to state 10


state 67

   14 conditional_statement: IF '(' expression ')' '{' statement '}' ELSE '{' statement '}' statement .

    $default  reduce using rule 14 (conditional_statement)
